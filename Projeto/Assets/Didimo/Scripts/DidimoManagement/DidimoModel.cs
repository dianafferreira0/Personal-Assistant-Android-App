using Didimo.Networking.DataObjects;
using System.Collections.Generic;
using System.IO;
using UnityEngine;
using Didimo.Utils;
#if UNITY_EDITOR
using UnityEditor;
#endif

namespace Didimo.DidimoManagement
{
    public interface IDidimoModel
    {
        void InstantiateDidimo(Transform root, string modelAssetsPath, bool updateOnly);
        bool MeshHasSkinning(string meshName);
#if UNITY_EDITOR
        void ImportDidimo(string didimoName, Transform root, string sourcePath, string targetPath);
#endif
    }

    /// <summary>
    /// The DidimoModel class, which we will create after parsing the model json that is generated by our pipeline. <see cref="DidimoModelFactory.CreateDidimoModel(Networking.DataObjects.DidimoModelDataObject)"/>
    /// This class is then used to create the didimo model, with skin weights, materials, etc.
    /// </summary>
    public abstract class DidimoModel<TDidimoDOModel> : IDidimoModel
        where TDidimoDOModel : DidimoModelDataObject
    {
        protected TDidimoDOModel dataObject;
        /// <summary>
        ///  Path where we will import the didimo files from (textures, etc)
        /// </summary>
        protected string modelSourcePath;
        protected Transform transform;
        /// <summary>
        /// <see cref="InstantiateDidimo(Transform, bool)"/>
        /// </summary>
        protected bool updateOnly;

#if UNITY_EDITOR
        // Path where we will save the didimo asset files into (meshes, materials, textures, etc)
        protected string modelTargetPath;
        protected string prefabName;
#endif

        /// <summary>
        /// DidimoModel constructor
        /// </summary>
        /// <param name="dataObject">The data object, from which we will isntantiate the model.</param>
        /// <param name="path">The path where the assets for this didimo are at, for example the textures.</param>
        public DidimoModel(TDidimoDOModel dataObject)
        {
            this.dataObject = dataObject;
        }

        protected void SetTransformValues(DidimoModelDataObject.Node node, Transform t)
        {
            t.localPosition = new Vector3(
                -node.position[0],
                 node.position[1],
                 node.position[2]) / dataObject.unitsPerMeter;
            t.localRotation = new Quaternion(
                node.rotation[0],
                -node.rotation[1],
                -node.rotation[2],
                node.rotation[3]);
            t.localScale = new Vector3(
                node.scale[0],
                node.scale[1],
                node.scale[2]);
        }

        /// <summary>
        /// Instantiate the didimo in the scene.
        /// </summary>
        /// <param name="dataObject">The data object that represents the didimo model, outputed by the didimo pipeline.</param>
        /// <param name="root">The parent transform of the instantiated didimo.</param>
        /// <param name="updateOnly">If true, we will search for the full hierarchy, from the root, instad of instantiating new GameObjects. Will fail if there are nodes in the DidimoModelDataObject's hierarchy not present in the scene.</param>
        public virtual void InstantiateDidimo(Transform root, string modelAssetsPath, bool updateOnly)
        {
            this.updateOnly = updateOnly;
            transform = root;
            this.modelSourcePath = modelAssetsPath;
            CreateHierarchy(updateOnly);
            SetMeshes();
            SetBoneWeights();
            SetMaterials();
            SetConstraints();

        }

        protected abstract void CreateHierarchy(bool updateOnly);

        public abstract bool MeshHasSkinning(string meshName);

        protected abstract void SetMaterials();

        protected virtual void SetMeshes()
        {
            DidimoModelDataObject.Mesh[] meshes = dataObject.GetMeshes();
            foreach (DidimoModelDataObject.Mesh source_mesh in meshes)
            {
                GameObject meshGO = transform.FindRecursive(source_mesh.name).gameObject;
                Mesh mesh = new Mesh();
                UpdateMeshData(mesh, source_mesh, meshGO);
            }
        }

        void UpdateMeshData(Mesh mesh, DidimoModelDataObject.Mesh source_mesh, GameObject meshGO)
        {
            if (MeshHasSkinning(source_mesh.name))
            {
                SkinnedMeshRenderer smr = null;
                if (updateOnly)
                {
                    smr = meshGO.GetComponent<SkinnedMeshRenderer>();
                }
                else
                {
                    smr = meshGO.AddComponent<SkinnedMeshRenderer>();
                }

                // TODO: This should come from the model, instead of being hard-coded
                if (smr.gameObject.name.Contains("eyeLash"))
                {
                    smr.shadowCastingMode = UnityEngine.Rendering.ShadowCastingMode.Off;
                }
                smr.sharedMesh = mesh;
            }
            else
            {
                MeshFilter mf = null;

                if (updateOnly)
                {
                    mf = meshGO.GetComponent<MeshFilter>();
                }
                else
                {
                    meshGO.AddComponent<MeshRenderer>();
                    mf = meshGO.AddComponent<MeshFilter>();
                }
                mf.sharedMesh = mesh;
            }
            mesh.name = source_mesh.name;

            List<Vector3> vertices = new List<Vector3>();
            List<Vector2> uvs = new List<Vector2>();

            List<Vector3> normals = new List<Vector3>();

            for (int i = 0; i < source_mesh.vertices.Length; i += 3)
            {
                vertices.Add(new Vector3(-source_mesh.vertices[i], source_mesh.vertices[i + 1], source_mesh.vertices[i + 2]) / dataObject.unitsPerMeter);
            }

            for (int i = 0; i < source_mesh.normals.Length; i += 3)
            {
                normals.Add(new Vector3(-source_mesh.normals[i], source_mesh.normals[i + 1], source_mesh.normals[i + 2]));
            }

            // Only one uv set supported
            for (int i = 0; i < source_mesh.uvs[0].Length; i += 2)
            {
                uvs.Add(new Vector2(source_mesh.uvs[0][i], source_mesh.uvs[0][i + 1]));
            }

            List<int> faces = new List<int>();
            for (int i = 0; i < source_mesh.faces.Length; i += 3)
            {
                faces.Add(source_mesh.faces[i + 2]);
                faces.Add(source_mesh.faces[i + 1]);
                faces.Add(source_mesh.faces[i]);
            }

            mesh.Clear();
            mesh.SetVertices(vertices);
            mesh.SetNormals(normals);
            mesh.SetUVs(0, uvs);
            mesh.SetTriangles(faces.ToArray(), 0, true);
            //mesh.RecalculateNormals();
            mesh.RecalculateTangents();
        }

        public abstract void SetBoneWeights();
        protected abstract void SetConstraints();


        /// This code will only work in editor, since we will be creating assets in the project 
#if UNITY_EDITOR
        /// <summary>
        /// Instantiate the didimo in the scene, and save assets into the specified targetPath (meshes, materials, etc).
        /// Also creates a prefab of the intantiated didimo in the specified path, named didimo.prefab.
        /// </summary>
        /// <param name="name">The name of the didimo.</param>
        /// <param name="root">The parent transform of the instantiated didimo.</param>
        /// <param name="sourcePath">The path where we will laod the assets from (textures mostly). Should be the same path where we extracted the didimo zip into.</param>
        /// <param name="targetPath">The path, in the Unity project, where we will import and create the assets for this didimo (meshes, materials, textures, prefabs, etc)</param>
        public virtual void ImportDidimo(string name, Transform root, string sourcePath, string targetPath)
        {
            updateOnly = false;
            this.transform = root;
            this.modelSourcePath = sourcePath;
            this.modelTargetPath = targetPath;
            this.prefabName = name;

            // First, save textures into the project
            ImportTextures();
            CreateHierarchy(false);
            ImportMeshes();
            SetBoneWeights();
            ImportMaterials();
            SetConstraints();
            SavePrefab();
        }

        public virtual void SavePrefab()
        {
            string modelTargetRelativePath = modelTargetPath;
            if (modelTargetRelativePath.StartsWith(Application.dataPath))
            {
                modelTargetRelativePath = "Assets" + modelTargetRelativePath.Substring(Application.dataPath.Length);
            }

            PrefabUtility.SaveAsPrefabAssetAndConnect(transform.gameObject, modelTargetRelativePath + "/" + prefabName + ".prefab", InteractionMode.UserAction);
            AssetDatabase.SaveAssets();
            AssetDatabase.Refresh();
        }

        protected virtual void ImportMeshes()
        {
            string modelTargetRelativePath = modelTargetPath;
            if (modelTargetRelativePath.StartsWith(Application.dataPath))
            {
                modelTargetRelativePath = "Assets" + modelTargetRelativePath.Substring(Application.dataPath.Length);
            }

            DidimoModelDataObject.Mesh[] meshes = dataObject.GetMeshes();
            foreach (DidimoModelDataObject1.Mesh meshDO in meshes)
            {
                string meshAssetPath = Path.Combine(modelTargetRelativePath, meshDO.name + ".asset");

                Mesh mesh = AssetDatabase.LoadAssetAtPath<Mesh>(meshAssetPath);
                if (mesh == null)
                {
                    mesh = new Mesh();
                    AssetDatabase.CreateAsset(mesh, meshAssetPath);
                }
                // We will be re-creating the mesh, so lets clear it so we won't have any clutter.
                mesh.Clear();

                GameObject meshGO = transform.FindRecursive(meshDO.name).gameObject;

                UpdateMeshData(mesh, meshDO, meshGO);
            }
        }

        protected abstract void ImportMaterials();
        protected abstract void ImportTextures();
#endif
    }
}